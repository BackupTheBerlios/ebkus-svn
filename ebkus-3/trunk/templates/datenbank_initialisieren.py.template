#!%(PYTHON_EXECUTABLE)s
# coding: latin-1

# Diese Datei wird generiert.

import os, sys, getopt
from os.path import join, split, dirname, basename, exists, isdir, isfile, normpath, abspath, splitext

def usage():
    s = """\
datenbank_initialisieren.py --standard
     Richtet ein neue Datenbank fuer diese Instanz ein entsprechend
     der Konfiguration.
     Falls der Instanzname mit demo beginnt, werden Beispieldaten
     erzeugt (für Demo- und Schulungszwecke).
     Falls berliner_version: true in der Konfiguration, wird
     der Berliner Strassenkatalog dazugenommen (im Demo-Fall nur ein
     kleiner Auschnitt) 

datenbank_initialisieren.py --merkmale <Merkmalsdatei>
                         [--strassenkatalog <Strassenkatalogdatei>]
                         [--demodaten]
     Richtet eine neue Datenbank fuer diese Instanz ein, deren
     Inhalt durch die angegebene Merkmalsdatei, durch
     einen angegebener Strassenkatalog (optional) und durch
     Demodaten (optional) definiert ist.
      
datenbank_initialisieren.py --sql <SQL-Datei>
     Richtet eine neue Datenbank fuer diese Instanz ein, deren
     Inhalt durch die angegebene SQL-Datei definiert ist.
     Eine solche Datei lässt sich mit
       datenbank_sichern.py --sql <Verzeichnis>
     erzeugen.

datenbank_initialisieren.py --zip <ZIP-Archiv>
     Wiederherstellen der Daten einer Instanz aus einer ZIP-Datei,
     die mit 
        datenbank_sichern.py --zip <Verzeichnis>
     erzeugt wurde. Das ZIP-Archiv enthaelt neben der SQL-Datei
     auch die Dokumente aus daten/akten und daten/gruppen.
      
datenbank_initialisieren.py --help | -h
    diese Hilfe

Beispiele:

python datenbank_initialisieren.py --standard
python datenbank_initialisieren.py --sql demo_dump_v3.2_2004-05-10_18-29-02.sql
python datenbank_initialisieren.py --merkmale meine_merkmale.py --strassenkatalog strkat.txt.gz
python datenbank_initialisieren.py --zip ../demo_backup_v3.2_2004-09-20_20-42-12.zip

"""
    print s
    sys.exit(1)

def check_exit(return_code):
    if return_code:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == '__main__':
    import init
    zip = merkmale = sql = strassenkatalog = demodaten = standard = nodump = None
    try:
        optlist, args = getopt.getopt(sys.argv[1:],
                                      'h',
                                      ['standard', 'merkmale=', 'sql=',
                                       'zip=',
                                       'strassenkatalog=', 'demodaten', 'nodump', 'help'])
    except getopt.GetoptError, m:
        print str(m)
        print '---------'
        usage()

    for option, value in optlist:
        if option in ('--merkmale',):
            merkmale = value
        if option in ('--sql',):
            sql = value
        if option in ('--standard',):
            standard = True
        if option in ('--zip',):
            zip = value
        if option in ('--strassenkatalog',):
            strassenkatalog = value
        if option in ('--demodaten',):
            demodaten = True
        if option in ('--nodump',):
            nodump = True
        if option in ('--help', '-h'):
            usage()

    if not (merkmale or sql or standard or zip):
        usage()
    if zip:
        if merkmale or sql or strassenkatalog or standard or demodaten:
            usage()
        if not isfile(zip):
            print "Datei %%s existiert nicht" %% zip
            sys.exit(1)
    if standard:
        if merkmale or sql or strassenkatalog or demodaten or zip:
            usage()
    if sql:
        if merkmale or standard or strassenkatalog or demodaten or zip:
            usage()
        if not isfile(sql):
            print "Datei %%s existiert nicht" %% sql
            sys.exit(1)
    if merkmale:
        if sql or standard or zip:
            usage()
        if not isfile(merkmale):
            print "Datei %%s existiert nicht" %% sql
            sys.exit(1)
        if strassenkatalog and not isfile(strassenkatalog):
            print "Datei %%s existiert nicht" %% strassenkatalog
            sys.exit(1)

    from ebkus.Install import InstallFromInstance
    from ebkus.config import config
    installer = InstallFromInstance(config)
    installer.init()
    instance = installer.ebkus[config.INSTANCE_NAME]
    if nodump:
        res = True
    else:
        res = instance.dump_database(os.getcwd())
    if not res:
        sys.exit(1)
    if zip:
        check_exit(instance.restore_instance(zip))
    elif standard:
        sql_file = None
    elif sql:
        sql_file = sql
    elif merkmale:
        sql_file = splitext(merkmale)[0] + '.sql'
        instance.generate_initial_database(merkmale, sql_file, strassenkatalog, demodaten)
    instance.create_database(sql_file=sql_file)






