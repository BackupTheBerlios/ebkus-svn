#!/usr/bin/python
# coding: utf-8

"""
start, restart, stop, status für Instanzen. 

Es werden nur real existierende Instanzen aufgerufen. 
Wird bis jetzt nur in der virtuellen Maschine verwendet.
"""

import os, sys, getopt

EBKUS_PYTHON_PATH = r'/home/ebkus/ebkus_installation/ebkus/lib'
EBKUS_HOME = r'/home/ebkus/ebkus_installation/ebkus'

import os, sys
assert sys.version_info >= (2,3), "Es wird Python 2.3 oder höher benötigt"

ebkus_conf = os.path.join(EBKUS_HOME, 'ebkus.conf')

# Pfad setzen
path = EBKUS_PYTHON_PATH
if path and path != sys.path[0]:
    sys.path.insert(0, path)

# Konfiguration einlesen und initialisieren
from ebkus.config import init
config = init(None, [ebkus_conf,])

def get_instance_info(config):
    """Fuer jede Instanz Kurzname, Langname, Start/Stop-Skript"""
    info = []
    for n in config.get_instances():
        config = init(n, [ebkus_conf])
        info.append((
                config.INSTANCE_NAME,
                config.INSTANCE_TITLE,
                "/etc/init.d/ebkus_%s" % config.INSTANCE_NAME,
                ))
    return info



# Instanzeninfo aus der ebkus.conf erzeugen
INSTANZEN = get_instance_info(config)


COMMANDS = ('start', 'stop', 'restart', 'status',)

def usage(error=None):
    if error:
        print '******', error
    s = """\
EBKuS-Instanzen starten, anhalten, neustarten, Status abfragen

ebkusctl <Instanzname oder 'alle'> <Kommando> 

z.B.

ebkusctl alle stop
ebkusctl %s restart

Gültige Kommandos: %s
Gültige Instanznamen: %s
Zuordnung der Instanznamen:
%s
""" % (
        INSTANZEN[0][0],
        ', '.join(COMMANDS),
       ', '.join([name for name, _, _ in INSTANZEN]),
       '\n'.join([("  %s:  %s" % (name, ort,)) for name, ort, _ in INSTANZEN])
       )
    print s
    sys.exit(1)

if __name__ == '__main__':
    try:
        optlist, args = getopt.getopt(sys.argv[1:],
                                      'h',
                                      ['help', 
                                       ])
    except getopt.GetoptError, m:
        usage(m)

    for option, value in optlist:
        if option in ('--help', '-h'):
            usage()
    if len(args) < 2:
        usage('Zuwenig Argumente')
    instanz, cmd = args[0], args[1]
    if cmd not in COMMANDS:
        usage('Falsches Kommando')
    if instanz not in [name for name,_,_ in INSTANZEN] + ['all', 'alle',]:
        usage('Unbekannte Instanz')
    # Kommando ausfuehren
    for name, _, scr in INSTANZEN:
        if instanz in ('all', 'alle') + (name,):
            os.system(scr + ' ' + cmd)
            
