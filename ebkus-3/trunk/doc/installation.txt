Installation
============

Übersicht
---------

EBKuS ist eine Webanwendung. Der Benutzer braucht auf seinem
Arbeitsplatzrechner zur Bedienung lediglich einen üblichen
Webbrowser und eine Netzverbindung zum Server, wo die eigentliche
Anwendung läuft. Die Netzverbindung kann entweder das Internet
sein oder ein lokales Netzwerk, also ein Intranet. Im Grenzfall
können Anwendung und Webbrowser auch auf demselben Rechner
laufen; in diesem Fall braucht der Rechner nicht vernetzt zu
sein.

Installationsarbeiten fallen also nur einmal auf dem Server an,
unabhängig von der Anzahl der Benutzer. Im Rahmen einer
Installation können außerdem mehrere EBKuS-Instanzen angelegt und
gemeinsam verwaltet werden. Jede Instanz repräsentiert eine
völlig unabhängige EBKuS-Anwendung. So kann neben der
eigentlichen 'Produktionsinstanz' leicht auch eine 'Demo-
bzw. Schulungsinstanz' angelegt werden.

Eine laufende EBKuS-Anwendung auf dem Server besteht aus drei
Komponenten:

* Apache-Webserver
* EBKuS-Server (einer pro Instanz)
* MySQL-Datenbank

Eine Anfrage vom Webbrowser des Benutzers wird folgendermaßen
abgearbeitet:

1. Der Apache-Webserver nimmt die SSL-verschlüsselte Anfrage
   entgegen und entschlüsselt sie.

2. Mit Hilfe eines CGI-Skript, das für alle Anfragen dasselbe
   ist, wird die Anfrage an den eigentlichen EBKuS-Server
   weitergeleitet.

3. Der EBKuS-Server interpretiert die Anfrage und kommuniziert
   dabei mit der MySQL-Datenbank, um Daten abzulegen oder
   abzufragen.

4. Über das CGI-Skript gelangt die Antwort (in der Regel eine
   HTML-Seite) zurück zum Apache-Webserver, der sie verschlüsselt
   und zum Webbrowser des Benutzers zurückschickt.

Es muss also über EBKuS hinaus auch der Apache-Webserver und die
MySQL-Datenbank auf dem Server installiert werden. Da der
EBKuS-Server in der Programmiersprache Python geschrieben ist,
muss diese ebenfalls vorhanden sein.

EBKuS 3.2 wurde unter Linux und Windows NT/2000/XP
getestet. Bei Windows NT muss zumindest das Service-Pack 6
installiert sein.

Es sollte möglich sein, EBKuS auf jedem
Betriebssystem zu installieren, auf dem die benötigten
Komponenten laufen. Darunter fallen andere Unix-Varianten
(z.B. BSD, Solaris) sowie Mac OS/X. Dies müsste aber
z.T. manuell erfolgen, d.h. ohne Unterstützung der
Installationsskripte.


Benötigte Software
------------------

Die EBKuS-Software ist erhältlich

- direkt aus der Versionsverwaltung CVS (siehe
  `CVS-Verzeichnis`_),
- als Quellcode in Form einer ZIP-Datei oder als Tarball
  (ca. 5MB, siehe `CVS-Verzeichnis`_), woraus eine vollständige
  Distribution erzeugt werden kann,
- als vollständige Distribution inklusive der zusätzlich
  benötigten Software (ca. 70MB, siehe
  `Distributions-Verzeichnis`_). 

Die vollständige Distribution kann als Installations-CD gebrannt
werden.

Im einzelnen wird neben der eigentlichen EBKuS-Software folgende
zusätzliche Software benötigt:

* die Programmiersprache Python, ab Version 2.3 

*Achtung*: Python muss auf jeden Fall als erstes installiert
werden, da alle Skripte, die die weitere Installation
unterstützen, Python benötigen.

* die Datenbank MySQL, ab Version 4.0

* MySQL-Python, eine Bibliothek zum Zugriff auf MySQL von Python
  aus, ab Version 0.9.2

* Apache-Webserver, ab Version 1.3.31 (nicht Version 2.0 und
  höher!)

* mod_ssl, ein Modul zur Unterstützung von SSL im
  Apache-Webserver, ab Version 2.8.18

* openssl, das ebenfalls zur Unterstützung von SSL benötigt wird,
  ab Version 0.9.7d

* Reportlab, eine Bibliothek zur Verarbeitung von PDF-Dateien von
  Python aus, ab Version 1.19

* Pygdchart, eine Bibliothek zur Erzeugung von Diagrammen zur
  Visualisierung von statistischen Daten von Python aus, ab
  Version 0.6.1

* srvstart, Programme zur Installation von Windows Diensten ab
  Version 1.1 (wird nur für Windows NT/2000/XP benötigt)

Es handelt sich durchweg um frei erhältliche
Open-Source-Software.  Die genauen Adressen zum Download befinden
sich in der Datei ``lib/ebkus/download.py``. Die Software muss in
der Regel *nicht* manuell heruntergeladen werden, da sie in der
vollständigen Distribution bzw. auf der Installations-CD bereits
vorhanden ist. Wenn man ohne Installations-CD installiert, wird
sie von den Installationsskripten (`create_cd.py`_,
`install.py`_) automatisch heruntergeladen.

Für Windows NT/2000/XP sind alle benötigten Komponenten auf der
Installations-CD enthalten. Python wird direkt von der CD
installiert; alle übrigen Komponenten sowie EBKuS selbst werden
durch das mitgelieferte Installationsskript automatisch
installiert und konfiguriert.

Für Linux sind ebenfalls alle Komponenten auf der
Installations-CD enthalten. Jedoch setzt das Installationsskript
unter Linux voraus, dass Python, MySQL-Python, ein SSL-fähiger
Apache-Webserver und MySQL bereits funktionsfähig installiert
sind. Wir empfehlen, die genannten Komponenten mit Hilfe der
entsprechenden Pakete der verwendeten Linux-Distribution zu
installieren und zu konfigurieren. Wer es sich zutraut, kann
alternativ dazu aber auch die auf der CD mitgelieferten
Komponenten manuell installieren und konfigurieren.


Verzeichnisstruktur und Dateien
-------------------------------

CVS-Verzeichnis
...............

Das CVS-Verzeichnis enthält die EBKuS-Quellen, die Basis für die
EBKuS-Entwicklung. 

Der EBKuS-Quellcode wird mit Hilfe des Versionskontrollsystems
CVS im Rahmen des Open-Source-Portals `BerliOS`_ verwaltet. Die
neuesten Quellen können direkt CVS-Server bezogen werden (von
einer Linux-Konsole aus)::

  export CVS_RSH=ssh
  cvs -z3 -d:pserver:anonymous@cvs.EBKuS.berlios.de:/cvsroot/ebkus co ebkus-2

.. _`BerliOS`: http://www.berlios.de/

Die Quellen der Version 3.2 können auch als ZIP-Datei
(|src_url_berlios|, |src_url_bke|) oder als
Tarball (http://ebkus.berlios.de/ebkus/ebkus-3.2-src.tar.gz)
heruntergeladen werden. 

Wenn man die Quellen aus dem CVS bezieht oder wenn man die
heruntergeladene Archivdatei entpackt, erhält man als oberstes
Verzeichnis ``ebkus-2``, das CVS-Verzeichnis.

EBKuS kann direkt aus diesem Verzeichnis mit dem
`install.py`_-Skript installiert werden, es wird aber empfohlen,
zunächst mit Hilfe des `create_cd.py`_-Skripts eine Distribution
zu erzeugen und von dort aus zu installieren. Die Distribution
enthält neben EBKuS die zusätzlich benötigte_ Software.
Eine fertige Distribution lässt sich von |dist_url|
herunterladen (ca. 70MB).


Distributions-Verzeichnis
.........................

Eine Distribution enthält sämtliche für die Installation von EBKuS
benötigte Software. Für den laufenden Betrieb ist sie nicht
erforderlich. 

Eine Distribution kann automatisch mit dem Skript `create_cd.py`_
aus dem `CVS-Verzeichnis`_ erstellt werden. Alternativ kann eine
fertige Distribution von |dist_url| heruntergeladen werden
(ca. 70MB). 

In einer Distribution bzw. auf der Installations-CD finden sich
drei Verzeichnisse:

- ``ebkus-3.2``, das eigentliche EBKuS-Distributions-Verzeichnis
  mit der EBKuS-Software
- ``linux``, enthält die für Linux zusätzlich benötigte Software
- ``win32``, enthält die für Windows NT/2000/XP zusätzlich
  benötigte Software 

Im Distributions-Verzeichnis ``ebkus-3.2`` befindet sich
insbesondere das `install.py`_-Skript, mit dem eine
EBKuS-Installation vorgenommen werden kann.


Installations-Verzeichnis
.........................

Die gesamte Software, die für den laufenden Betrieb von EBKuS
nötig ist, befindet sich im Installations-Verzeichnis.

Der Name des Installations-Verzeichnis ist frei wählbar. Es muss
vor der Installation existieren.

Das Installationsskript `install.py`_ installiert die
EBKuS-Software sowie evt. weitere Komponenten in das
Installations-Verzeichnis.

Im Zuge der Installation wird darin vom Installationsskript das
EBKuS-`Home-Verzeichnis`_ mit dem Name ``ebkus`` angelegt. Unter
Windows NT/2000/XP werden außerdem die Verzeichnisse ``apache``,
``mysql``, ``openssl`` und ``srvstart`` erzeugt, die die
Software der jeweiligen Komponente enthalten.

Home-Verzeichnis
................

Das Home-Verzeichnis ``ebkus`` enthält die EBKuS-Software einer
Installation. Es wird von `install.py`_ im
`Installations-Verzeichnis`_ angelegt.

Dateien:

.. - TODO: zum Schluss ergänzen

- ``README.txt``: erste Orientierung
- ``LICENSE.txt``: Kopie der GNU GPL
- ``CHANGES.txt``: Veränderungen gegenüber der letzten Version
- ``TODO.txt``: geplante bzw. angedachte Änderungen 
- ``configure.py``: Skript zur Generierung neuer Instanzen und zur
  Konfiguration
- ``uninstall.py``: Deinstallationsskript
- ``ebkus.conf``: die EBKuS-Konfigurationsdatei (siehe
  `Konfiguration`_). `install.py`_ bzw. `configure.py`_ benötigen
  die darin definierten Werte für eine korrekte Installation.
- ``ebkus_httpd.conf``: Fragment der Apache-Konfiguration, das
  von `configure.py`_ generiert wird und das von der
  Apache-Konfigurationsdatei ``httpd.conf`` inkludiert wird.
- ``openssl.cnf``: SSL-Konfigurationsdatei, die von
  `configure.py`_ generiert wird.

Verzeichnisse:

- ``ebkus_ssl_certificates``: enthält die Zertifikate für die
  Apache-SSL-Verschlüsselung. Der Inhalt wird von `configure.py`_
  generiert. 
- ``htdocs``: enthält die statischen Dateien der EBKuS-Anwendung
  für den Apache-Webserver (Bilder, Hilfedateien, etc.), die für
  alle Instanzen identisch sind
- ``lib``: enthält den Python-Code der EBKuS-Anwendung
- ``log``: enthält die Apache-Log-Dateien für die EBKuS-Anwendung
  (nicht jedoch die instanzspezifische Log-Datei, siehe
  `Instanz-Verzeichnis`_) 
- ``sql``: enthält Dateien zur Initialisierung der Datenbank
- ``templates``: enthält Vorlagen für zu generierende Dateien
- ``vorlagen``: enthält eine Vorlage für den `Wordexport`_
- für jede Instanz ein eigenes Verzeichnis mit dem Namen der
  Instanz. Enhält die instanzspezifischen Dateien und
  Verzeichnissen (siehe `Instanz-Verzeichnis`_).

Anmerkung: Bei der Erstinstallation werden alle zu generierenden
Dateien (``ebkus_httpd.conf``, etc.) auch von `install.py`_
generiert. 


Instanz-Verzeichnis
...................

Das Instanz-Verzeichnis enthält alle instanzspezifischen Dateien
und Verzeichnisse.

Im Rahmen einer EBKuS-Installation können mehrere Instanzen einer
EBKuS-Anwendung eingerichtet und verwaltet werden. Es können also
für mehrere Dienststellen je eigene Instanzen eingerichtet
werden, sowie Demo- und Schulungsinstanzen mit Spieldaten.

Jede Instanz hat ihren eigenen EBKuS-Server, der unabhängig von
anderen Instanzen gestartet und angehalten werden kann. Jede
Instanz hat ihre eigene Datenbank. Es ist nicht möglich, die
Daten verschiedener Instanzen zu verknüpfen oder
zusammenzufassen. Alle Instanzen verwenden gemeinsam eine
Apache-Installation und eine MySQL-Installation.

Im Normalfall liegt das Instanz-Verzeichnis im
`Home-Verzeichnis`_ und trägt den Namen der Instanz. Die
`Konfiguration`_ kann allerdings explizit vorsehen, dass ein
Instanz-Verzeichnis woanders liegt und einen anderen Namen trägt.

Dateien:

- ``start.py``, ``stop.py``,
  ``status.py``, ``datenbank_initialisieren.py``,
  ``datenbank_sichern.py``: instanzspezifischen `Skripte`_, die alle
  von `configure.py`_ generiert werden
- ``init.py``: generierter Python-Code, der von allen
  instanzspezifischen Skripten verwendet wird
- instanzspezifische Log-Datei: heißt normalerweise
  *Instanzname*.log, enthält alle Meldungen des EBKuS-Servers der
  Instanz, sofern diese nicht auf der Konsole ausgegeben werden
  (siehe `start.py`_)

Verzeichnisse:

- ``htdocs``: enthält die instanzspezfischen statischen Dateien
  der EBKuS-Anwendung  für den Apache-Webserver, darin:

  - das CGI-Skript ``htdocs/cgi/do``, das die Kommunikation zwischen
    Apache-Webserver und EBKuS-Server übernimmt
  - die Eingangsseite ``htdocs/index.html``, über die die
    Login-Maske erreicht werden kann

- ``protokolle``: enthält die archivierten Protokolle (siehe
  `Protokollierung`_) 
- ``daten``: enthält die vom Anwender hochgeladenen Dokumente
  (siehe `Aktendokumente`_, `Gruppenakte`_) 

Konfiguration
-------------

Die zentrale Konfigurationsdatei für eine EBKuS-Installation ist
eine Textdatei namens ``ebkus.conf`` und befindet sich im
`Home-Verzeichnis`_.

Als Ausgangspunkt für die eigene Konfiguration dient die vom
Installationsskript `install.py`_ generierte
Konfigurationsdatei. Die meisten Parameter sind darin bereits
korrekt gesetzt.

Aufbau von ``ebkus.conf``
.........................

Zeilen, die leer sind oder mit dem Kommentarzeichen ``#``
beginnen, werden ignoriert, z.B.::

  #ebkus_home:  %(install_dir)s\ebkus

Zeilen, die nur aus einem Namen in eckigen Klammern bestehen,
leiten eine Sektion ein, z.B.::

  [apache]

Die übrigen Zeilen weisen einem Parameter einen Wert zu. Sie
beginnen mit dem Namen des Parameters, gefolgt von einem
Doppelpunkt, gefolgt von dem Wert. Vor oder nach dem Doppelpunkt
können Leerzeichen stehen. Beispiel::

  install_dir: C:\ebinst

Werte können eine Syntax enthalten, die es erlaubt, vorher
definierte Parameter in einen aktuellen Wert einzubeziehen
(*Parametersubstitution*), 
z.B.:: 

  install_dir: C:\ebinst
  ebkus_home:  %(install_dir)s\ebkus

Hier wird der Wert von ``install_dir`` in den Wert von
``ebkus_home`` einbezogen. Das ist genauso, als ob man gleich

::

  ebkus_home:  C:\ebinst\ebkus

definiert hätte. ``%(``\ *parameter*\ ``)s`` wird durch den Wert 
von *parameter* ersetzt.

Jede gültige Konfigurationsdatei muss die folgenden Sektionen
aufweisen:

- ``[DEFAULT]``
- ``[ebkus]``
- ``[apache]``
- ``[openssl]``
- eine Sektion für jede Instanz: ``[``\ *Instanzname*\ ``]``

Die möglichen Parameter für jede Sektion sind in den folgenden
Tabellen aufgeführt.

Alle Parameter außer denen, die in den Tabellen als **NOTWENDIG**
gekennzeichnet sind, haben einen Standardwert ('default'), der in
der Tabelle in der Spalte *Standardwert* angegeben ist. Ein
Parameter hat diesen Wert, wenn er in der Konfiguration fehlt
oder auskommentiert ist.

Wie man sieht, können Parametersubstitutionen auch bei
Standardwerten stattfinden.  Der Wert des notwendige Parameter
*install_dir* findet dadurch Eingang in weitere Parameter
(*ebkus_home*, *instance_home*), ohne dass diese explizit in
der Konfiguration aufgeführt sind.

*Anmerkung zu den Tabellen*: In einigen Fällen ist der angegebene
Standardwert aus layout-technischen Gründen auf mehrere Zeilen
verteilt, obwohl er eigentlich ohne Leerzeichen hintereinanderweg
in einer Zeile stehen müsste.

``[DEFAULT]``
.............

Die generierte Konfigurationsdatei enthält die korrekten Werte.

Der Parameter *install_dir* bezeichnet das
Installationsverzeichnis und muss immer in der Konfiguration
definiert werden. Es bildet den Bezugspunkt für alle weiteren
Pfade. Standardmäßig ist *ebkus_home* das Verzeichnis ``ebkus``
im Installationsverzeichnis; das sollte nicht verändert werden.

Die in der Sektion ``[DEFAULT]`` definierten Parameter können in
allen anderen Sektionen im Rahmen der Parametersubstitution als
Teil eine Wertes verwendet werden (z.B. in der Definition von
*instance_home*). Ansonsten stehen nur die Parameter derselben
Sektion zur Verfügung.

===========================  =========================  ========================
Parameter                    Standardwert               Bedeutung
===========================  =========================  ========================
``install_dir``              **NOTWENDIG**              `Installations-Verzeichnis`_
``ebkus_home``               ``%(install_dir)s/ebkus``  `Home-Verzeichnis`_. Sollte
                                                        nie explizit angegeben werden.
===========================  =========================  ========================


``[ebkus]``
...........

Die generierte Konfigurationsdatei enthält in der Regel die
korrekten Werte. 

Die *database_admin_\**-Parameter erlauben den
Installationsskripten, neue Datenbanken für Instanzen
einzurichten und diese bei der Deinstallation auch wieder zu
entfernen. 

Falls aus Sicherheitsgründen erwünscht, kann hier ein
Passwort für den Administratorzugriff auf MySQL eingetragen
werden. Geschieht dies unter Windows NT/2000/XP vor der
automatischen Installation von MySQL, wird bei der automatischen
Installation der Administratorzugriff mit diesem Passwort
eingerichtet.

Falls das Passwort für den Administratorzugriff nicht im Klartext
in der Konfigurationsdatei stehen soll, kann stattdessen ``ASK``
eingetragen werden. Dann fragen alle Skripte, die den
Administratorzugriff benötigen, interaktiv nach dem Passwort,
ohne es irgendwo zu speichern.


===========================  =========================  ========================
Parameter                    Standardwert               Bedeutung
===========================  =========================  ========================
``download_dir``             ``%(install_dir)s``        Download-Verzeichnis, 
                                                        nur bei Installation vom
                                                        `CVS-Verzeichnis`_ von 
                                                        Bedeutung
``python_executable``        wird vom aktuellen         Vollständiger Pfad des 
                             Python-Interpreter         Python-Executables
                             genommen
``mysql_dir``                                           Verzeichnis, in dem die
                                                        MySQL-Programme ``mysql``,
                                                        ``mysqldump``, etc. stehen.
                                                        Muss angegeben werden, wenn
                                                        MySQL-Programme nicht im Pfad
                                                        stehen.
``database_admin_host``      ``localhost``              Name oder IP-Nummer des Rechners, 
                                                        auf dem MySQL läuft.
                                                        Muss angegeben werden, wenn
                                                        das nicht der lokale Rechner ist.
``database_admin_user``      ``root``                   MySQL-Benutzer mit 
                                                        Administratorrechten
``database_admin_password``                             Dessen Passwort. Wenn hier ``ASK`` 
                                                        steht, wird das Passwort bei Bedarf
                                                        interaktiv abgefragt.
===========================  =========================  ========================



``[apache]``
............

Für den Parameter *server_name* muss unbedingt der Name oder die
IP-Nummer des Rechners eingetragen werden, auf dem der
Apache-Webserver läuft. Die generierte Konfigurationsdatei setzt
den Standardwert ``localhost``, womit EBKuS nur auf dem lokalen
Rechner zugänglich ist.

Für den Parameter *server_admin* sollte eine sinnvolle
Email-Adresse eingetragen werden. Sie taucht in 
Apache-Fehlermeldungen auf.

Alle übrigen Werte können in der Regel von der generierten
Konfigurationsdatei übernommen werden.


============================  ===========================  ========================
Parameter                     Standardwert                 Bedeutung
============================  ===========================  ========================
``server_name``               ``localhost``                Name oder IP-Nummer des 
                                                           Rechners, auf dem der
                                                           Apache-Webserver läuft.
                                                           **Muss** explizit 
                                                           eingetragen
                                                           werden, sonst kann EBKuS
                                                           nur auf dem lokalen Rechner
                                                           verwendet werden!
``server_admin``              ``admin@localhost``          Email-Adresse des 
                                                           Administrators
                                                           für den Apache-Webserver
``apache_log_dir``            ``%(ebkus_home)s/log``       Verzeichnis, in dem der
                                                           Apache-Webserver 
                                                           Log-Dateien anlegt
``ssl_certificate_file``      ``%(ebkus_home)s/``          Vollständiger Pfad
                              ``ebkus_ssl_certificates/``  der SSL-Zertifikat-Datei
                              ``ebkusserver.cert``
``ssl_certificate_key_file``  ``%(ebkus_home)s/``          Vollständiger Pfad der
                              ``ebkus_ssl_certificates/``  SSL-Schlüssel-Datei
                              ``ebkusserver.key``
============================  ===========================  ========================


``[openssl]``
.............

Die Anwendung ist voll funktionsfähig mit den Werten aus der
generierten Konfigurationsdatei; es empfiehlt sich jedoch, die
organisatorischen Angaben für das SSL-Zertifikat anzupassen.

===========================  =========================  ========================
Parameter                    Standardwert               Bedeutung
===========================  =========================  ========================
``staat``                    ``DE``                     Erscheint im SSL-Zertifikat
``land``                     ``Berlin``                 Erscheint im SSL-Zertifikat
``ort``                      ``Berlin``                 Erscheint im SSL-Zertifikat
``organisation``             ``EFB``                    Erscheint im SSL-Zertifikat
``organisationseinheit``     ``EFB``                    Erscheint im SSL-Zertifikat
``output_password``          ``polo``                   Wird zur automatischen
                                                        Zertifikatgenerierung benötigt
``openssl_executable``       ``openssl``                Aufruf des
                                                        openssl-Executable. 
                                                        Vollständiger
                                                        Pfad kann hier eingetragen 
                                                        werden,
                                                        falls ``openssl`` nicht im 
                                                        Pfad steht.
===========================  =========================  ========================


``[``\ *Instanzname*\ ``]``
...........................

Im Rahmen einer EBKuS-Installation auf einem Server können mehrere 
Instanzen einer EBKuS-Anwendung eingerichtet werden. Jede Instanz

- hat einen Namen (*instance_name*)
- ist über eine eigene URL ansprechbar
  (``https://``\ *server_name*\ ``/ebkus/``\ *instance_name*\ ``/index.html``)
- hat eine eigene Datenbank im Rahmen einer MySQL-Installation 
  (*database_name*, *database_user*, *database_password*)
- hat ein eigenes Verzeichnis (*instance_home*)
- hat einen eigenen EBKuS-Server, der vom Apache-Webserver über
  eine eigene Portnummer angesprochen wird (*port*)
- hat eine eigene Log-Datei (*log_file*)

Für jede gewünschte Instanz wird eine Sektion in der
Konfigurationsdatei angelegt. Die Sektionsüberschrift wird aus
dem Namen der Instanz in eckigen Klammern gebildet. Der Name
sollte mit einem Buchstaben beginnen und ansonsten nur
Buchstaben, Ziffern und Unterstriche (``_``) enthalten (keine
Leerzeichen!).

Falls der Instanzname mit ``demo`` beginnt, werden bei der
Installation der Datenbank automatisch Demodaten erzeugt. Neben
dem Benutzer ``Admin`` (Passwort: ``Admin``) gibt es dann auch
den Benutzer ``test`` (Passwort: ``test``) und ``verw``
(Passwort: ``verw``).

Jede Sektion kann die in der Tabelle aufgeführten Parameter
definieren. Erforderlich ist Wiederholung des Instanznamen als
Wert von *instance_name*, ferner die Angabe einer eigenen,
eindeutigen Portnummer, *port*. Für alle anderen Parameter können
die Standardwerte genommen werden.

Natürlich muss man *berliner_version* auf ``true`` setzen, wenn
man die Berliner Version mit Berliner Straßenkatalog haben
möchte; EBKuS-spezifische Fehlermeldungen sollten außerdem eine
sinnvolle Telefonnummer bzw. Email-Adresse des
Anwendungsbetreuers haben (*admin_tel*, *admin_email*).

Die Parameter *host* und *database_host* müssen nur dann
angepasst werden, wenn der EBKuS-Server bzw. die MySQL-Datenbank
nicht auf demselben Rechner laufen wie der Apache-Webserver.

Die bei der Installation generierte Konfigurationsdatei definiert drei
Instanzen: 

- ``demo``: Demodaten, kein Straßenkatalog 
- ``demo_berlin``: Demodaten, Berliner Straßenkatalog (kleiner
  Ausschnitt, nur Straßen, deren Namen mit 'Aa' beginnen)
- ``muster_efb``: keine Demodaten, kein Straßenkatalog. Beispiel
  für eine Produktionsinstanz, die vom Anwendungsbetreuer
  eingerichtet werden muss (siehe `Einrichtung der Anwendung`_).


===========================  =========================  ========================
Parameter                    Standardwert               Bedeutung
===========================  =========================  ========================
``instance_name``            *Instanzname*              Name der Instanz. Muss
                             (**NOTWENDIG**)            angegeben werden und mit
                                                        dem Namen der Sektion identisch
                                                        sein.
``instance_home``            ``%(ebkus_home)s/``        `Instanz-Verzeichnis`_
                             ``%(instance_name)s``
``database_name``            ``%(instance_name)s``      Name der Instanz-Datenbank
``database_host``            ``localhost``              Name oder IP-Nummer des Rechners,
                                                        auf dem die Datenbank läuft.
``database_user``            ``%(instance_name)s``      Name des Datenbankbenutzers der
                                                        Instanz
``database_password``        ``%(instance_name)s``      Datenbankpasswort der Instanz
``port``                     **NOTWENDIG**              Portnummer über die der EBKuS-Server
                                                        angesprochen wird. Muss angegeben
                                                        werden. Jede Instanz muss eine
                                                        unterschiedliche Portnummer erhalten.
``host``                     ``localhost``              Name oder IP-Nummer des Rechners, auf
                                                        dem der EBKuS-Server läuft
``log_file``                 ``%(instance_home)s/``     Name der Datei, in die der EBKuS-Server
                             ``%(instance_name)s.log``  Meldungen schreibt
``log_level``                ``INFO``                   Legt fest, wie "geschwätzig" der
                                                        EBKuS-Server ist. Muss einer der 
                                                        folgenden Werte sein, in aufsteigender
                                                        Wortfülle:
                                                        ``CRITICAL, ERROR, WARNING, 
                                                        INFO, DEBUG``
                                                        (``DEBUG`` ist *nur* für die 
                                                        Fehlersuche
                                                        geeignet, 
                                                        da sehr viel ausgegeben wird.)
``loeschfrist``              ``36``                     Löschfrist in Monaten. Akten, die
                                                        älter sind, können vom Administrator
                                                        gelöscht werden.
``session_time``             ``120``                    Länge einer Session in Minuten. Nach
                                                        dieser Zeit wird ein Benutzer
                                                        automatisch abgemeldet, wenn er keine 
                                                        Eingaben mehr macht.
``admin_name``               ``Keine Angabe``           Name des Administrators.
                                                        Wird in Fehlermeldungen genannt.
``admin_tel``                ``Keine Angabe``           Telefonnummer des Administrators.
                                                        Wird in Fehlermeldungen genannt.
``admin_email``              ``Keine Angabe``           Email-Adresse des Administrators.
                                                        Wird in Fehlermeldungen genannt.
``berliner_version``         ``false``                  Wenn hier ``true`` steht, wird die
                                                        Berliner EBKuS-Version verwendet (mit
                                                        Berliner Straßenkatalog).
===========================  =========================  ========================


Installation - Schritt für Schritt
----------------------------------

EBKuS 3.2 hat keine graphische Installationsoberfläche wie bei
vielen Windows-Programmen üblich. Stattdessen gibt es eine Reihe
von Installationsskripten (`create_cd.py`_, `install.py`_,
`configure.py`_, `uninstall.py`_), die die Installation und
Konfiguration automatisieren bzw. unterstützen.

Da diese Skripte in der Programmiersprache Python geschrieben
sind, muss als erstes gewährleistet sein, dass Python in der
Version 2.3 oder höher auf dem Rechner installiert ist.

Alle Skripte können mit der Option ``-h`` bzw. ``--help``
aufgerufen werden, um Näheres über die Verwendungsweise zu
erfahren.


Windows NT/2000/XP
..................

Voraussetzungen: 

- Es sind Administratorrechte erforderlich.
- Der Apache-Webserver und die MySQL-Datenbank sind nicht
  installiert bzw. vollständig deinstalliert.
- Eine EBKuS-Distribution. Falls diese nicht vorhanden ist,
  kann man sie selber erstellen mit dem Skript `create_cd.py`_ 
  oder von |dist_url| herunterladen (ca. 70MB).

Schritte:

1. Kommandozeile öffnen (siehe `Aufruf unter Windows NT/2000/XP`_).

2. In die EBKuS-Distribution gehen (im Beispiel wird angenommen,
   dass die Distribution sich auf einer CD im Laufwerk ``E:``
   befindet)::

     C:\>E:
     E:\>cd E:\win32
     E:\win32>


3. Python installieren::

     E:\win32>start Python-2.3.4.exe

   (Doppelklicken auf die Datei im Explorer geht auch.)  Den
   Anweisungen folgen. Benötigt wird nur die erste Komponente,
   Python-Interpreter und libraries.

4. `Installations-Verzeichnis`_ einrichten,
   z.B. ``C:\ebkus_installation``::

     E:\win32>mkdir C:\ebkus_installation


5. In das EBKuS-Distributions-Verzeichnis gehen::

     E:\win32>cd \ebkus-3.2
     E:\ebkus-3.2>

6. EBKuS-Konfiguration erzeugen::

     E:\ebkus-3.2>install.py --config C:\ebkus_installation

7. Erzeugte Konfigurationsdatei
   ``C:\ebkus_installation\ebkus\ebkus.conf`` anpassen (siehe
   `Konfiguration`_).

8. Apache, MySQL, EBKuS und alle in der Konfigurationsdatei
   definierten EBKuS-Instanzen installieren und konfigurieren::

     E:\ebkus-3.2>install.py C:\ebkus_installation

   Für jede in der Konfiguration definierten Instanz gibt es dann
   ein `Instanz-Verzeichnis`_:

     ``C:\ebkus_installation\ebkus\``\ *Instanzname*

   Unter ``Start > Einstellungen > Systemsteuerung > Verwaltung >
   Dienste`` gibt es nun die Dienste ``Apache`` und ``MySQL``
   sowie einen Dienst für jede in der Konfiguration definierte
   Instanz, ``EBKuS-``\ *Instanzname*, z.B. ``EBKuS-demo``. Alle
   Dienste sind nach der Installation gestartet.

   Die Meldungen des Installationsskriptes stehen auch in der Datei
   ``C:\ebkus_installation\install.log``.

9. Die Windows-Dienste für jede EBKuS-Instanz auf 'Starttyp:
   Automatisch' setzen.

   Nach der Installation ist der Dienst im Zustand 'Starttyp:
   Manuell', er wird also beim Hochfahren des Rechners nicht
   automatisch gestartet. Um ein automatisches Starten sicher zu
   stellen, ist über ``Start > Einstellungen > Systemsteuerung >
   Verwaltung > Dienste > EBKuS-``\ *Instanzname* ``>
   Eigenschaften`` der Starttyp auf 'Automatisch' zu setzen.

   Der Apache- und der MySQL-Dienst sind schon auf 'Automatisch'
   gesetzt.

         
10. Über einen Browser mit der Instanz ``demo`` arbeiten (anstatt
    ``demo`` auch mit jeder anderen in der `Konfiguration`_
    definierten Instanz)::

      https://localhost/ebkus/demo/cgi/do/login

    Die Login-Maske kann auch über eine vorgeschaltete
    Eingangsseite erreicht werden, die für jede Instanz generiert
    wird::

      https://localhost/ebkus/demo/index.html

    Diese Seite kann mit einem HTML-Editor gemäß den lokalen
    Bedürfnissen erweitert oder verändert werden. Die zu
    editierende Datei ist im `Instanz-Verzeichnis`_ unter
    ``htdocs\index.html`` zu finden.

    Als Administrator anmelden: Benutzer ``Admin``, Passwort
    ``Admin``. Als angemeldeter Administrator können Sie weitere
    Benutzer anlegen.

    Die Instanzen ``demo`` bzw. ``demo_berlin`` enthalten bereits
    Beispieldaten, mit denen Sie experimentieren können. Sie
    können sich also gleich als Bearbeiter bzw. als
    Verwaltungskraft anmelden, z.B. Benutzer ``test``, Passwort
    ``test`` bzw. Benutzer ``verw``, Passwort ``verw``.

    Falls Sie in der Konfiguration den Parameter *server_name*
    mit einer in Ihrem Netzwerk gültigen IP-Adresse oder einem
    gültigen Namen belegt haben, können Sie auch von anderen
    Rechnern im Netzwerk auf eine EBKuS-Instanz zugreifen, z.B.::

     https://192.168.1.92/ebkus/demo/index.html
     https://192.168.1.92/ebkus/demo/cgi/do/login

11. In einer Produktionsinstanz die Anwendung einrichten, siehe
    `Einrichtung der Anwendung`_.

GNU/Linux
.........

Voraussetzungen: 

- Python und MySQL-Python sind bereits installiert. 
- Die MySQL-Datenbank ist installiert und Sie haben das Recht, in
  MySQL neue Datenbanken anzulegen (d.h. Sie können sich als
  Benutzer ``root`` bei der Datenbank anmelden).
- Der Apache-Webserver ist installiert und SSL-fähig über
  mod_ssl. Sie verfügen über die nötigen Rechte, um die
  Apache-Konfigurationsdatei ``httpd.conf`` zu modifizieren.
- Eine EBKuS-Distribution. Falls diese nicht vorhanden ist,
  kann man sie selber erstellen mit dem Skript `create_cd.py`_ 
  oder von |dist_url| herunterladen (ca. 70MB).

Schritte:

1. `Installations-Verzeichnis`_ einrichten,
   z.B. ``/home/user/ebinst``::

     mkdir /home/user/ebinst

2. In das `Distributions-Verzeichnis`_ gehen
   (z.B. ``/home/user/ebkus-cd/ebkus-3.2``; man könnte hier auch direkt von
   der CD arbeiten)::

     cd /home/user/ebkus-cd/ebkus-3.2 

3. EBKuS-Konfiguration erzeugen::

     python install.py --config /home/user/ebinst

4. Erzeugte Konfigurationsdatei ``/home/user/ebinst/ebkus/ebkus.conf``
   anpassen (siehe `Konfiguration`_). 

5. EBKuS und alle in der Konfigurationsdatei definierten
   Instanzen installieren und konfigurieren::

     python install.py /home/user/ebinst

   Für jede in der Konfiguration definierten Instanz gibt es dann
   ein `Instanz-Verzeichnis`_:

     ``/home/user/ebinst/ebkus/``\ *Instanzname*

   Die Meldungen des Installationsskriptes stehen auch in der Datei
   ``/home/user/ebinst/install.log``.

6. (als ``root``) Die in Schritt 5. erzeugte Datei
   ``/home/user/ebinst/ebkus/ebkus_httpd.conf`` in die
   Apache-Konfigurationsdatei (bei SuSE z.B. /etc/httpd/httpd.conf)
   inkludieren, z.B. indem Sie dort am Ende die folgende Zeile
   eintragen::

     Include /home/user/ebinst/ebkus/ebkus_httpd.conf

7. (als ``root``) Den Apache-Webserver neustarten, damit die modifizierte
   Konfiguration berücksichtigt wird, z.B. bei SuSE::

     rcapache restart

8. Eine konfigurierte EBKuS-Instanz testen, z.B. die Instanz
   demo::

     cd /home/user/ebinst/ebkus/demo
     ./start.py --console

   Der gestartete Server gibt Meldungen auf die Konsole aus.
   
9. Über einen Browser mit der Instanz ``demo`` arbeiten (anstatt
   ``demo`` auch mit jeder anderen in der `Konfiguration`_
   definierten Instanz)::

     https://localhost/ebkus/demo/cgi/do/login

   Die Login-Maske kann auch über eine vorgeschaltete
   Eingangsseite erreicht werden, die für jede Instanz generiert
   wird::

     https://localhost/ebkus/demo/index.html

   Diese Seite kann mit einem HTML-Editor gemäß den lokalen
   Bedürfnissen erweitert oder verändert werden. Die zu
   editierende Datei ist im `Instanz-Verzeichnis`_ unter
   ``htdocs/index.html`` zu finden.

   Als Administrator anmelden: Benutzer ``Admin``, Passwort
   ``Admin``. Als angemeldeter Administrator können Sie weitere
   Benutzer anlegen.

   Die Instanzen ``demo`` bzw. ``demo_berlin`` enthalten bereits
   Beispieldaten, mit denen Sie experimentieren können. Sie
   können sich also gleich als Bearbeiter bzw. als
   Verwaltungskraft anmelden, z.B. Benutzer ``test``, Passwort
   ``test`` bzw. Benutzer ``verw``, Passwort ``verw``.

   Falls Sie in der Konfiguration den Parameter *server_name* mit
   einer in Ihrem Netzwerk gültigen IP-Adresse oder einem
   gültigen Namen belegt haben, können Sie auch von anderen
   Rechnern im Netzwerk auf eine EBKuS-Instanz zugreifen, z.B.::

     https://192.168.1.92/ebkus/demo/index.html
     https://192.168.1.92/ebkus/demo/cgi/do/login

10. (als ``root``) Die Instanz in die Bootsequenz des Servers
    aufnehmen, so dass beim Hochfahren des Rechners der
    EBKuS-Server für die Instanz automatisch gestartet wird::

      cd /home/user/ebinst/ebkus/demo
      cp ebkus_demo /etc/init.d

    Die Links für die Run-Level manuell setzen oder, z.B. bei
    SuSE, den Run-Level-Editor verwenden.

11. In einer Produktionsinstanz die Anwendung einrichten, siehe
    `Einrichtung der Anwendung`_.


Skripte
-------

Alle Skripte setzen voraus, dass Python 2.3 oder höher auf dem
System installiert ist. Es ist besonders darauf zu achten, dass
bei mehrfacher Installation von Python immer derselbe Interpreter
verwendet wird.

Die Skripte ``create_cd.py``, ``install.py`` und
``interaktiv.py`` sind Bestandteil der Distribution; alle anderen
werden im Zuge der Installation generiert und sind abhängig von
der gegebenen Konfiguration.

Die Skripte sollten nur aus dem jeweiligen Verzeichnis heraus
aufgerufen werden, in dem sie sich befinden. Es ist also zuerst
mit Hilfe des ``cd``-Befehls dorthin zu navigieren.

Alle Skripte können mit der Option ``-h`` oder ``--help``
aufgerufen werden. Es wird dann ein kurzer Hilfetext auf der
Konsole ausgegeben.

Aufruf unter Windows NT/2000/XP
...............................

Alle Skripte werden von der Kommandozeile ("Eingabeaufforderung",
"Konsole", früher "DOS-Fenster") aus aufgerufen. Man erhält ein
Fenster mit Kommandozeile über ``Start > Ausführen > "cmd"
eintragen``.

Die Skripte benötigen im Allgemeinen unter Windows
Administratorrechte.  (Wenn man Windows-Systemdateien
löschen/modifizieren/ergänzen kann, hat man die :-)

Es gibt folgende Varianten beim Aufruf der Skripte (am Beispiel
``create_cd.py``):


1. Ohne explizite Angabe des Interpreters::

     E:\ebkus-3.2>create_cd.py C:\ebkus_cd

   Voraussetzung ist, dass es einen registrierten Dateityp ``PY``
   gibt, so dass solche Dateien mit dem Python-Interpreter
   geöffnet werden.  Standardmäßig wird der bei der
   Python-Installation eingerichtet, so dass dies in der Regel
   funktionieren sollte.  Manuell kann die Verknüpfung über
   ``Start > Einstellungen > Systemsteuerung > Orderoptionen >
   Dateitypen`` vorgenommen werden.

2. Angabe des Interpreters ohne vollständigen Pfad::
  
     E:\ebkus-3.2>python create_cd.py C:\ebkus_cd

   Diese Variante ist nicht auf die Verknüpfung mit dem Dateityp
   angewiesen, erfordert jedoch, dass Python im Pfad steht.Bei
   der Standard-Windows-Installation wird Python nicht in den
   Pfad eingetragen. Manuell erfolgt der Eintrag über ``Start >
   Einstellungen > Systemsteuerung > System > Erweitert >
   Umgebungsvariablen > Systemvariablen oder Benutzervariablen >
   path``. Dort wird das Verzeichnis, in dem sich ``python.exe``
   befindet, mit ";" getrennt hinzugefügt.

3. Angabe des Interpreters mit vollständigen Pfad::

     E:\ebkus-3.2>C:\Programme\Python23\python.exe create_cd.py C:\ebkus_cd

   Diese Variante ist umständlicher, funktioniert dafür aber
   immer.

Aufruf unter GNU/Linux
......................

Alle Skripte werden von einer Shell (Terminal, Konsole) aus
aufgerufen. 

Alle Skripte werden mit den Rechten des Benutzers ausgeführt, bei
dem EBKuS installiert ist bzw. werden soll. Root-Rechte sind
nicht nötig (siehe jedoch Installationsschritte `GNU/Linux`_). 

Es gibt folgende Varianten beim Aufruf der Skripte (am Beispiel
``create_cd.py``):

1. Ohne explizite Angabe des Interpreters::

     user@host:~/ebkus-3.2> ./create_cd.py ~/ebkus_cd

   Voraussetzung ist für ``cd_create.py`` und ``install.py``,
   dass der Python-Interpreter im Pfad steht. Bei den übrigen
   Skripten ist das nicht nötig, da sie mit dem korrekten Pfad
   generiert werden.

2. Angabe des Interpreters ohne vollständigen Pfad::
  
     user@host:~/ebkus-3.2> python create_cd.py ~/ebkus_cd

   Diese Variante erfordert, dass Python im Pfad steht.

3. Angabe des Interpreters mit vollständigen Pfad::

     user@host:~/ebkus-3.2> /usr/local/bin/python create_cd.py ~/ebkus_cd

   Diese Variante ist umständlicher, funktioniert dafür aber
   immer.


``create_cd.py``
................

Zweck: Aus den Quelldateien eine EBKuS-Distribution erstellen,
geeignet zum Brennen einer Distributions-CD.

Verzeichnis: `CVS-Verzeichnis`_

Hinweis: Eine fertige Distribution lässt sich von |dist_url|
herunterladen (ca. 70MB).

Wenn man selber mit diesem Skript eine Distribution erstellen
will, muss man

- Python 2.3 oder höher installieren (http://www.python.org/)
- EBKuS 3.2 Quellcode herunterladen und auspacken, so dass ein
  `CVS-Verzeichnis`_ vorhanden ist 
  (http://ebkus.berlios.de/ebkus/ebkus-3.2-src.tar.gz)

Anmerkung: Die Dokumentation im HTML bzw. PDF-Fomat kann nur
erstellt werden, wenn docutils_ installiert ist. Ist dies nicht
der Fall, werden automatisch die fertigen HTML-
bzw. PDF-Versionen des Handbuchs von der `Projekt-Homepage`_
heruntergeladen und in die Distribution einbezogen.

.. _docutils: http://docutils.sourceforge.net/

.. _`Projekt-Homepage`: http://ebkus.berlios.de/index.html

Aufruf::

  python create_cd.py [Optionen] verzeichnis

Optionen:

  --linux        Nur die für Linux benötigte Software herunterladen
  --win32        Nur die für Windows benötigte Software herunterladen

Erstellt in *verzeichnis*, das vorhanden sein muss, alle für die
EBKuS-Distributions-CD benötigten Dateien und Verzeichnisse, die
dann nur noch gebrannt werden müssen.

*verzeichnis* darf kein Unterverzeichnis des
aktuellen Verzeichnisses sein.

Die benötigte_ Software wird automatisch heruntergeladen. Dazu muss
eine Internetverbindung aktiv sein. Das Herunterladen der Software 
dauert ca. ein halbe Stunde, wenn eine DSL-Anbindung vorhanden ist 
(Gesamtmenge etwa 70Mb).

.. _benötigte: `Benötigte Software`_

In *verzeichnis* legt das Skript folgende Unterverzeichnisse an::

 ebkus-3.2  -  EBKuS-Distributions-Vezeichnis
 linux      -  die für Linux zusätzlich benötigte Software
 win32      -  die für Windows NT/2000/XP zusätzlich benötigte Software


``install.py``
..............

Zweck: Auf der Grundlage einer Distribution EBKuS auf einem
Server-System installieren. Mit der Option ``--config`` eine
default-Konfiguration anlegen.

Verzeichnis: `Distributions-Verzeichnis`_, (`CVS-Verzeichnis`_)

Anmerkung: ``install.py`` sollte bevorzugt vom
`Distributions-Verzeichnis`_ aus verwendet werden, kann aber auch
direkt aus dem `CVS-Verzeichnis`_ aus aufgerufen werden, also
ohne Umweg über die Distribution. Das Handbuch im HTML-
bzw. PDF-Format sollte in diesem Fall vorher manuell durch Aufruf von
``doc/make.py`` erstellt werden.


Aufruf (Konfiguration anlegen)::

  python install.py --config  installationsverzeichnis
  python install.py -c  installationsverzeichnis

Legt das `Home-Verzeichnis`_ ``ebkus`` in
*installationsverzeichnis* an, falls es noch nicht existiert,
und erstellt darin eine default-Konfigurationsdatei
``ebkus.conf``. *installationsverzeichnis* muss bereits
existieren. 

Die Installation wird nicht weiter fortgesetzt.
Die Konfigurationsdatei kann nun modifiziert und ergänzt werden
(siehe `Konfiguration`_), bevor im nächsten Schritt eine
vollständige Installation vorgenommen wird.

Ausserdem wird die Konfiguration auf der Konsole
ausgegeben.

Aufruf (installieren)::

  python install.py [Option] installationsverzeichnis

Optionen:

  --no_apache    verhindert unter Windows die Apache-Installation
  --no_mysql     verhindert unter Windows die MySQL-Installation
  --no_srvstart  verhindert unter Windows die srvstart-Installation

  --download_dir downloadverzeichnis, -d downloadverzeichnis
    Diese Option wird im Normalfall nicht benötigt, wenn vom
    `Distributions-Verzeichnis`_ installiert wird. Alle
    benötigte Software ist in der Distribution enthalten.

    Wenn vom `CVS-Verzeichnis`_ installiert wird, werden im
    *downloadverzeichnis* die ZIP-Archive der zu installierenden
    Komponenten erwartet. Falls nicht vorhanden, werden sie in
    dieses Verzeichnis heruntergeladen. Ohne diese Option wird
    das Installationsverzeichnis als Downloadverzeichnis
    verwendet.


Installiert alle für den Betrieb von EBKuS benötigten Komponenten
im `Installations-Verzeichnis`_, das bereits existieren
muss. Gesteuert wird die Installation von von der
Konfigurationsdatei ``ebkus.conf`` im `Home-Verzeichnis`_. Falls
diese noch nicht existiert, wird eine default-Konfiguration
angelegt (siehe `Konfiguration`_).

Komponenten sind

  - ``ebkus``
  - alle in der Konfigurationsdatei  definierten Instanzen
    (defaultmässig gibt es zumindest eine Instanz ``demo``)
  - ``reportlab``
  - ``pygdchart``

Unter Windows NT/2000/XP darüberhinaus

  - ``mysql``
  - ``mysql_python``
  - ``apache``
  - ``openssl``
  - ``srvstart``

Diese werden bei Bedarf vom Internet heruntergeladen und im
Installationsverzeichnis installiert und konfiguriert.

Unter Linux sollten ``mysql``, ``mysql_python``, ``apache`` und
``openssl`` bereits installiert sein und die nötigen
Konfigurationsdaten bereits in ``ebkus.conf`` eingetragen sein
(siehe `Konfiguration`_).
  
Das Ergebnis ist eine lauffähige Installation, falls keine Fehler
aufgetreten sind. ``install.py`` beinhaltet die Funktionalität
des `configure.py`_-Skripts; letzteres wird nur benötigt, wenn
weitere Instanzen eingerichtet werden sollen.


``uninstall.py``
................

Zweck: EBKuS bzw. einzelne Instanzen deinstallieren. Unter
Windows NT/2000/XP auch die Komponenten ``mysql``, ``apache``,
``srvstart`` und ``openssl`` deinstallieren.

Verzeichnis: `Distributions-Verzeichnis`_, `Home-Verzeichnis`_

Anmerkung: ``uninstall.py`` kann sowohl vom
Distributions-Verzeichnis als auch vom Home-Verzeichnis aus
aufgerufen werden.

Aufruf::

  python uninstall.py installationsverzeichnis komponente ...

Deinstalliert aus *installationsverzeichnis* die aufgeführten
*komponenten*.

*komponente* kann sein:

- ``ebkus``
- ein *instanzname*
- (unter Windows NT/2000/XP) ``mysql``, ``apache``, 
  ``srvstart``, ``openssl``
  
Die Deinstallation der Komponente ``ebkus`` beinhaltet die
Deinstallation aller Instanzen.

Instanzen können nur dann deinstalliert werden, wenn keine Daten
im Verzeichnis ``daten`` mehr vorhanden sind. Bevor die zur
Instanz gehörenden MySQL-Datenbank gelöscht wird, wird eine
Datenbankkopie als SQL-Datei im `Installations-Verzeichnis`_
abgelegt. Diese Kopie kann mit dem Skript
`datenbank_initialisieren.py`_ verwendet werden, um eine Instanz
wiederherzustellen.

Die beim Anlegen einer neuen Instanz genannten Vorgänge (siehe
`configure.py`_) werden beim Deinstallieren rückgängig gemacht,
falls die Deinstallation fehlerfrei gelingt.

Unter Windows lässt sich ``mysql`` und ``apache`` nur dann
deinstallieren, wenn alle Instanzen deinstalliert sind.



``configure.py``
................

Zweck: Auf der Grundlage einer vorhandenen Installation EBKuS
konfigurieren und neue Instanzen anlegen.

Verzeichnis: `Home-Verzeichnis`_

Aufruf (EBKuS konfigurieren)::

  python configure.py ebkus

[Achtung: ``ebkus`` ist hier kein Parameter sondern wörtlicher
Teil des Befehls.]

Die Dateien ``ebkus_httpd.conf``, ``openssl.cnf`` und
``configure.py`` selbst werden entsprechend der aktuellen
Konfigurationsdatei ``ebkus.conf`` neu generiert.

Aufruf (Instanz anlegen)::

  python configure.py instanzname

Eine neue Instanz mit dem Name *instanzname* anlegen. Dies
funktioniert nur dann, wenn in ``ebkus.conf`` eine Instanz mit
demselben Namen definiert ist (siehe `Konfiguration`_). 

Das Anlegen einer neuen Instanz beinhaltet:

- ein neues Verzeichnis angelegen im `Home-Verzeichnis`_,
  dessen Name *instanzname* ist und das alle instanzspezifischen
  Dateien und Verzeichnisse enthält (`Instanz-Verzeichnis`_)
- generieren der instanzspezifischen Skripte (``start.py``,
  ``stop.py``, etc.)
- anlegen der instanzspezifischen Verzeichnisse (``htdocs``,
  ``daten``, etc.)
- instanzspezifische Einträge in die Datei ``ebkus_httpd.conf`` im
  `Home-Verzeichnis`_ vornehmen für die Einbindung der Instanz in
  den Apache-Webserver
- einrichten einer neuen Datenbank in MySQL, falls nicht schon eine
  Datenbank mit demselben Namen und Passwort vorhanden ist
- (nur Linux) generieren eines Shell-Skripts zum starten/stoppen
  des EBKuS-Servers für die Instanz beim Hochfahren des Rechners
  (für ``/etc/init.d``) 
- (nur Windows) Einrichten eines Windows-Dienstes für den
  EBKuS-Server der Instanz


``start.py``
............

Zweck: Starten des EBKuS-Servers der Instanz.

Verzeichnis: `Instanz-Verzeichnis`_

Aufruf::

  python start.py

Optionen:

  --show       zusätzlich die Konfiguration auf der Konsole ausgegeben
  --console    Meldungen werden auf die Konsole ausgegeben statt
               in die konfigurierte Log-Datei
  --critical, --error, --warning, --info, --debug  Log-Level
               (siehe `Konfiguration`_). Ein hier angegebener
               Log-Level hat Vorrang vor dem in der
               Konfigurationsdatei. 

Startet den EBKuS-Server für die betreffende Instanz. 


``stop.py``
...........

Zweck: Stoppen des EBKuS-Servers der Instanz.

Verzeichnis: `Instanz-Verzeichnis`_

Aufruf::

  python stop.py


Stoppt den EBKuS-Server für die betreffende Instanz. 


``status.py``
.............

Zweck: Status des EBKuS-Servers anzeigen.

Verzeichnis: `Instanz-Verzeichnis`_

Aufruf::

  python status.py


Gibt ``Ok`` aus wenn der Server läuft, sonst ``Not running``.


``ebkus_``\ *Instanzname*
.........................

Zweck: (Nur Linux) Shell-Skript zur Kontrolle des Servers.

Verzeichnis: `Instanz-Verzeichnis`_, kopieren nach ``/etc/init.d``

Aufruf (als root)::

  /etc/init.d/ebkus_<Instanzname> start|stop|restart|status

``<Instanzname>`` ist durch den Namen der Instanz zu ersetzen, also
z.B.::

  /etc/init.d/ebkus_demo start

Dieses Shell-Skript kann in einem Linux-System zum
Starten/Stoppen des Servers beim Hochfahren/Herunterfahren des
Rechners verwendet werden. Installation gemäß den Vorgaben der
jeweiligen Linux-Distribution. Getestet nur unter SuSE 8.2!
Eventuell muss dieses Skript für andere Linux-Distributionen
umgeschrieben werden.

Für SuSE 8.2 gilt z.B.:

- nach ``/etc/init.d`` kopieren
- den Runlevel-Editor verwenden, um den Runlevel festzulegen 

``dienst.py``
.............

Zweck: (Nur Windows NT/2000/XP)
Starten/Stoppen/Installieren/Deinstallieren des Windows-Dienstes
für den EBKuS-Server der Instanz. Kann auch für den MySQL
bzw. den Apache-Dienst verwendet werden.

Verzeichnis: `Instanz-Verzeichnis`_

Aufruf (als root)::

  python dienst.py Option [mysql|apache]

Optionen::

  --start       Dienst starten
  --stop        Dienst anhalten
  --restart     Dienst neustarten
  --status      Status abfragen
  --install     als Windows-Dienst installieren
  --remove      als Windows-Dienst entfernen

Ist ``mysql`` oder ``apache`` angegeben, beziehen sich die
Operationen auf den mysql- bzw. auf den apache-Dienst. Ansonsten
beziehen sie sich auf den Dienst der aktuellen EBKuS-Instanz.

*Achtung*: Der Windows-Dienst für eine EBKuS-Server-Instanz ist
nach der Installation im Zustand 'Starttyp: Manuell', er wird
also beim Hochfahren des Rechners nicht automatisch gestartet. Um
ein automatisches Starten sicher zu stellen, ist über ``Start >
Einstellungen > Systemsteuerung > Verwaltung > Dienste >
EBKuS-``\ *Instanzname* ``> Eigenschaften`` der Starttyp auf
'Automatisch' zu setzen.

*Manuelle Entfernung von Diensten*: Wenn aus irgendwelchen Gründen
ein Dienst sich nicht mit `uninstall.py`_ oder `dienst.py`_ entfernen
lässt (um z.B. den Weg für eine Neuinstallation freizumachen),
kann man wie folgt vorgehen:

- (alle Dienste) zuerst den Dienst anhalten (über die Kommandozeile)::

    net stop <Dienstname>
  
  z.B.::

    net stop EBKuS-demo
    net stop Apache
    net stop MySQL
    
  oder über ``Start > Einstellungen > Systemsteuerung > Verwaltung > Dienste >`` 
  *Dienst auswählen*  ``> Beenden``

- Dienst für eine Instanz entfernen: Im
  `Installations-Verzeichnis`_ in das Verzeichnis ``srvstart``
  gehen, und dort::

    srvstart remove EBKuS-demo

  ausführen. Für ``demo`` ist der jeweilige Instanzname
  einzusetzen. Falls das Verzeichnis ``srvstart`` nicht
  existiert, ``srvstart_run.v110.zip`` von der Distribution
  in ein Verzeichnis entpacken (z.B. mit WinZip) und dort den
  Befehl ausführen.

- Dienst für Apache-Webserver entfernen: Im
  `Installations-Verzeichnis`_ in das Verzeichnis ``apache``
  gehen, und dort::

    apache -k uninstall -n Apache

  ausführen. Falls das Verzeichnis ``apache`` nicht existiert,
  ``Apache_1.3.31-Mod_SSL_2.8.17-Openssl_0.9.7d-Win32.zip`` von
  der Distribution in ein Verzeichnis entpacken (z.B. mit WinZip)
  und dort den Befehl ausführen.

- Dienst für MySQL entfernen: Im
  `Installations-Verzeichnis`_ in das Verzeichnis ``mysql\bin``
  gehen, und dort::

    mysqld-nt --remove MySQL

  ausführen. Falls das Verzeichnis ``mysql`` nicht existiert,
  ``mysql-4.0.18-win-noinstall.zip`` von
  der Distribution entpacken (z.B. mit WinZip), in das
  ``bin``-Verzeichnis gehen  und dort den Befehl ausführen.



``datenbank_initialisieren.py``
...............................


Zweck: Die Datenbank einer EBKuS-Instanz zu initialisieren oder
aus einem Backup-ZIP-Archiv wiederherzustellen.

Falls bereits eine Datenbank für die Instanz existiert, wird
diese in das aktuelle Arbeitsverzeichnis als SQL-Datei gesichert.

Es ist eine der folgenden Varianten zu verwenden.

Aufruf::

  python datenbank_initialisieren.py --standard

Richtet ein neue leere Datenbank fuer diese Instanz ein
entsprechend der Konfiguration.  Falls der Name der Instanz mit
``demo`` beginnt, werden Beispieldaten erzeugt (für Demo- und
Schulungszwecke). Falls in der `Konfiguration`_
``berliner_version: true`` steht, wird der Berliner
Straßenkatalog dazugenommen (im ``demo``-Fall nur ein kleiner
Ausschnitt).

Aufruf::

  python datenbank_initialisieren.py --merkmale merkmalsdatei
                         [--strassenkatalog strassenkatalogdatei]
                         [--demodaten]

Richtet eine neue Datenbank fuer diese Instanz ein, deren Inhalt
durch die angegebene Merkmalsdatei definiert ist. Optional kann ein
Straßenkatalog dazugeladen werden. (Der Berliner Straßenkatalog
und ein Ausschnitt daraus finden sich im Verzeichnis
``sql``.) Mit der Option ``--demodaten`` werden automatisch
Beispieldaten erzeugt.

Aufruf::

  python datenbank_initialisieren.py --sql sql_datei

Richtet eine neue Datenbank fuer diese Instanz ein, deren Inhalt
durch *sql_datei* definiert ist. 
Eine solche Datei lässt sich mit `datenbank_sichern.py`_ mit der
``--sql``-Option erzeugen.
Vor der Deinstallation einer Instanz wird ebenfalls ein
SQL-Dump als Backup erstellt.

Aufruf::

  python datenbank_initialisieren.py --zip zip_archiv

Wiederherstellen der Daten einer Instanz aus einer ZIP-Datei, die
mit `datenbank_sichern.py`_ mit der ``--zip``-Option erzeugt
wurde. Das ZIP-Archiv enthaelt neben der SQL-Datei auch die
Dokumente aus ``daten/akten`` und ``daten/gruppen`` im
`Instanz-Verzeichnis`_. 
      

``datenbank_sichern.py``
........................

Zweck: Sicherung der Datenbank der Instanz als SQL-Datei oder als
ZIP-Datei zusammen mit den Klienten- und Gruppenakten.

Aufruf::

  python datenbank_sichern.py --sql verzeichnis

Datenbank-Kopie als SQL-Datei erzeugen. Falls kein Verzeichnis
angegeben ist, wird die Datei in das aktuelle Arbeitsverzeichnis
geschrieben. Der Name der erzeugten SQL-Datei ist wie folgt
aufgebaut::

  <Instanzname>_dump_<EBKuS-Version>_<Datum>_<Zeit>.sql
  demo_dump_v3.2_004-09-22_14-49-11.sql

Die Datenbank kann mit

::

  datenbank_initialisieren.py --sql sql-datei
  
wiederhergestellt werden.

Aufruf::

  python datenbank_sichern  --zip verzeichnis

Datenbank-Archiv als ZIP-Datei erzeugen. Falls kein Verzeichnis
angegeben ist, wird die Datei in das aktuelle Arbeitsverzeichnis
geschrieben.  Der Name des erzeugten ZIP-Archivs ist wie folgt
aufgebaut::

  <Instanzname>_backup_<EBKuS-Version>_<Datum>_<Zeit>.zip
  demo_backup_v3.2_004-09-22_14-49-11.zip

Das ZIP-Archiv enthält sowohl die Datenbank-Kopie
als SQL-Datei als auch alle Dateien, die unter ``daten/akten``
bzw. ``daten/gruppen`` im `Instanz-Verzeichnis`_ abgespeichert
sind.  Damit lassen sich alle Daten einer Instanz sichern.  Die
Instanz lässt sich mit

::

  datenbank_initialisieren.py --zip zip_archiv 

wiederherstellen.


``interaktiv.py``
.................

Zweck: Zugriff auf die interne EBKuS-API
über eine interaktive Python-Shell für Python-Entwickler.

Nur unter Linux getestet!

Verzeichnis: ``lib/ebkus``

Aufruf::

  # Zunaechst interaktiv.py in ein Instanzverzeichnis kopieren
  python -i interaktiv.py

Man erhält eine interaktive Python-Shell. Im Namensraum ``e`` hat
man direkten Zugriff auf alle EBKuS-Funktionen.

