#!%(PYTHON_EXECUTABLE)s
# coding: latin-1

# Diese Datei wird generiert.

import os, sys, socket, traceback
import win32service
import winerror
import win32serviceutil

class Instanzdienst(win32serviceutil.ServiceFramework):
    _svc_name_ = "ebkus_" + "%(INSTANCE_NAME)s"
    _svc_display_name_ = "EBKuS-" + "%(INSTANCE_NAME)s"
    _svc_description_ = "EBKuS-Dienst fuer " + "%(INSTANCE_TITLE)s"
    _instance_port_ = %(PORT)s
    _instance_home_ = "%(INSTANCE_HOME)s"
    def __init__(self, args):
        assert self._instance_port_ and self._instance_home_
        win32serviceutil.ServiceFramework.__init__(self, args)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        self._stop(self._instance_port_)

    def SvcDoRun(self):
        self._start(self._instance_home_)

    def _start(self, instance_home):
        os.chdir(instance_home)
        import init
        import ebkus.ebs
        from ebkus.bobo.pcgi_publisher import main
        main('ebkus.ebs')

    def _stop(self, port):
        # Wir sind im selben Prozess, localhost sollte immer gehen
        host = 'localhost'
        tosend = 'XX6859236XXquit'
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((host, port))
            s.send(tosend)
            s.shutdown(1)
            s.close()
        except:
            #traceback.print_exc()
            #print 'Something went wrong'
            sys.exit(1)

# Vereinfachte Version von win32serviceutil.HandleCommandLine
def HandleCommandLine(cls):
    """Utility function allowing services to process the command line.
    Standard commands: 'start', 'stop', 'install', 'remove', 'status'
    """
    def get_status(code):
        status_map = (
            ('running', win32service.SERVICE_RUNNING),
            ('starting', win32service.SERVICE_START_PENDING),
            ('stopping', win32service.SERVICE_STOP_PENDING),
            ('stopped', win32service.SERVICE_STOPPED),
            ('not installed', 999),
            ('not installed', None),
            )
        for s, c in status_map:
            if code == c:
                return s
    err = 0
    argv = sys.argv
    if len(argv)<=1:
        usage()
    arg = argv[1]
    serviceName = cls._svc_name_
    serviceDisplayName = cls._svc_display_name_
    description = cls._svc_description_
    serviceClassString = win32serviceutil.GetServiceClassString(cls)
    startup = win32service.SERVICE_AUTO_START
    if arg=="start":
        try:
            win32serviceutil.StartService(serviceName)
            print "%%s started" %% serviceDisplayName
        except win32service.error, exc:
            print "error starting service: %%s" %% exc.strerror
            err = exc.winerror
    elif arg=="restart":
        win32serviceutil.RestartService(serviceName)
        print "%%s restarted" %% serviceDisplayName
    elif arg=="install":
        try:
            win32serviceutil.InstallService(serviceClassString, serviceName, serviceDisplayName, 
                                            startType=startup ,description=description)
            print "%%s installed" %% serviceDisplayName
        except win32service.error, exc:
            print "error installing service: %%s (%%d)" %% (exc.strerror, exc.winerror)
            err = exc.winerror
    elif arg=="remove":
        try:
            win32serviceutil.RemoveService(serviceName)
            print "%%s removed" %% serviceDisplayName
        except win32service.error, exc:
            print "error removing service: %%s (%%d)" %% (exc.strerror,exc.winerror)
            err = exc.winerror
    elif arg=="stop":
        try:
            win32serviceutil.StopService(serviceName)
            print "%%s stopped" %% serviceDisplayName
        except win32service.error, exc:
            print "error stopping service: %%s (%%d)" %% (exc.strerror,exc.winerror)
            err = exc.winerror
    elif arg=="status":
        try:
            status = win32serviceutil.QueryServiceStatus(serviceName)[1]
        except win32service.error, exc:
            status = 999
        print "%%s %%s" %% (serviceDisplayName, get_status(status))
    else:
        err = -1
        print "Unknown command - '%%s'" %% arg
        usage()
    return err


def usage():
    print 'Usage: pydienst.py install     --  Dienst installieren'
    print '       pydienst.py remove      --  Dienst deinstallieren'
    print '       pydienst.py start       --  Dienst starten'
    print '       pydienst.py stop        --  Dienst beenden'
    print '       pydienst.py status      --  Dienststatus abfragen'
    sys.exit(1)

if __name__=='__main__':
    for s in ('?', '/?', '-h', '--help', '-help', 'help'):
        if s in sys.argv:
            usage()
    HandleCommandLine(Instanzdienst)
